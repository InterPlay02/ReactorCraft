/*******************************************************************************
 * @author Reika Kalseki
 * 
 * Copyright 2017
 * 
 * All rights reserved.
 * Distribution of the software in any form is only allowed with
 * explicit, prior permission from the owner.
 ******************************************************************************/
// Date: 24/09/2013 9:40:19 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package Reika.ReactorCraft.Models;

import java.util.ArrayList;

import org.lwjgl.opengl.GL11;

import net.minecraft.tileentity.TileEntity;

import Reika.DragonAPI.Instantiable.Rendering.LODModelPart;

public class ModelBigTurbine extends ModelTurbine
{

	private LODModelPart housing;
	private LODModelPart housing2;

	private LODModelPart Shape4;
	private LODModelPart Shape4a;
	private LODModelPart Shape4b;

	private LODModelPart Shape220b;

	public ModelBigTurbine(int stage)
	{
		super(stage);
		housing = new LODModelPart(this, 58, 11);
		int w1 = this.getHousingLength();
		int w2 = stage == 0 ? 12 : this.getHousingLength()+1;
		int l1 = this.getBladeLength()+2;
		int l2 = (int)Math.ceil(this.getBladeLength()*this.getScaleFactor())+2;
		int d = this.getHousingDepth();
		housing.addBox(-w1, l1, 0, w1*2, 1, d);
		housing.setRotationPoint(0F, 15F, 0);
		housing.setTextureSize(128, 128);
		housing.mirror = true;
		this.setRotation(housing, 0, 0, 0);

		housing2 = new LODModelPart(this, 58, 11);
		housing2.addBox(-w2, l2, -8, w2*2, 1, d);
		housing2.setRotationPoint(0F, 15F, 0);
		housing2.setTextureSize(128, 128);
		housing2.mirror = true;
		this.setRotation(housing2, 0, 0, 0);

		Shape4 = new LODModelPart(this, 39, 10);
		Shape4.addBox(-4F, 12F, 0F, 8, 16, 1);
		Shape4.setRotationPoint(0F, 6F, 6F);
		Shape4.setTextureSize(128, 128);
		Shape4.mirror = true;
		this.setRotation(Shape4, 0F, 0F, 0F);
		Shape4a = new LODModelPart(this, 19, 0);
		Shape4a.addBox(-22F, -4F, 0F, 44, 8, 1);
		Shape4a.setRotationPoint(0F, 14F, 6F);
		Shape4a.setTextureSize(128, 128);
		Shape4a.mirror = true;
		this.setRotation(Shape4a, 0F, 0F, 0F);
		Shape4b = new LODModelPart(this, 19, 10);
		Shape4b.addBox(-4F, -8F, 0F, 8, 16, 1);
		Shape4b.setRotationPoint(0F, 2F, 6F);
		Shape4b.setTextureSize(128, 128);
		Shape4b.mirror = true;
		this.setRotation(Shape4b, 0F, 0F, 0F);

		Shape220b = new LODModelPart(this, 39, 10);
		Shape220b.addBox(-4F, -16F, 0F, 8, 16, 1);
		Shape220b.setRotationPoint(0F, 34F, 6F);
		Shape220b.setTextureSize(128, 128);
		Shape220b.mirror = true;
		this.setRotation(Shape220b, -0.3490659F, 0F, 0F);
	}

	@Override
	public void renderAll(TileEntity te, ArrayList li, float phi, float theta)
	{
		super.renderAll(te, li, phi, theta);
		this.renderHousing(te);

		if (stage == 0) {
			//Shape4.render(te, f5);
			//	Shape4a.render(te, f5);
			//Shape4b.render(te, f5);
		}
	}

	public int getHousingDepth() {
		switch(stage) {
		case 0:
			return 6;
		case 1:
			return 6;
		case 2:
			return 6;
		case 3:
			return 7;
		case 4:
			return 7;
		case 5:
			return 8;
		case 6:
			return 9;
		}
		return 6;
	}

	public int getHousingSegments() {
		switch(stage) {
		case 0:
			return 8;
		case 1:
			return 10;
		case 2:
			return 12;
		case 3:
			return 12;
		case 4:
			return 18;
		case 5:
			return 18;
		case 6:
			return 20;
		}
		return 10;
	}

	public int getHousingLength() {
		switch(stage) {
		case 0:
			return 9;
		case 1:
			return 11;
		case 2:
			return 11;
		case 3:
			return 13;
		case 4:
			return 10;
		case 5:
			return 12;
		case 6:
			return 12;
		}
		return 4;
	}

	private void renderHousing(TileEntity te) {
		int a = 360/this.getHousingSegments();
		for (int i = 0; i < 360; i += a) {
			GL11.glTranslated(0, 1, 0);
			GL11.glRotated(i, 0, 0, 1);
			GL11.glTranslated(0, -1, 0);
			housing.render(te, f5);
			housing2.render(te, f5);

			if (stage == 0) {
				double d = 1.25;
				double b = -0.15;
				double c = -0.3;
				GL11.glTranslated(0, c, b);
				GL11.glScaled(d, d, d);
				Shape220b.render(te, f5);
				GL11.glScaled(1/d, 1/d, 1/d);
				GL11.glTranslated(0, -c, -b);
			}
			GL11.glTranslated(0, 1, 0);
			GL11.glRotated(-i, 0, 0, 1);
			GL11.glTranslated(0, -1, 0);
		}
	}

	@Override
	public int getBladeLength() {
		switch(stage) {
		case 0:
			return 20;
		case 1:
			return 31;
		case 2:
			return 38;
		case 3:
			return 46;
		case 4:
			return 53;
		case 5:
			return 62;
		case 6:
			return 72;
		}
		return 4;
	}

	@Override
	public int getAngularSeparation() {
		switch(stage) {
		case 0:
			return 4;
		case 1:
			return 3;
		case 2:
			return 3;
		case 3:
			return 3;
		case 4:
			return 3;
		case 5:
			return 3;
		case 6:
			return 4;
		}
		return 10;
	}

	@Override
	public int getBladeTwist() {
		return super.getBladeTwist();
	}

	@Override
	public int getBladeWidth() {
		return super.getBladeWidth();
	}

	@Override
	public double getScaleFactor() {
		double d = stage == 0 ? 1.3 : 1.1;
		if (stage == 3)
			d = 1.075;
		return stage >= 5 ? d*(1-(stage-2)*0.01) : d;
	}

}
